name: Security Audit & Vulnerability Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - dependencies
          - static_analysis
          - secrets

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer
  SECURITY_REPORT_PATH: security_reports

jobs:
  # Comprehensive security analysis
  security_audit:
    name: Security Audit
    runs-on: macos-14
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Security Tools
      run: |
        echo "üîß Installing security analysis tools..."
        
        # Install security scanning tools
        brew install checkov
        brew install semgrep
        brew install git-secrets
        
        # Install dependency scanning tools
        npm install -g retire
        pip3 install safety
        
        echo "‚úÖ Security tools installed"

    - name: Create Security Reports Directory
      run: mkdir -p ${{ env.SECURITY_REPORT_PATH }}

    - name: Secret Detection Scan
      run: |
        echo "üîç Running comprehensive secret detection..."
        
        # Configure git-secrets
        git secrets --register-aws
        git secrets --install
        
        # Scan for various types of secrets
        echo "Scanning for API keys, tokens, and credentials..."
        
        # Create comprehensive secret patterns
        cat > secret_patterns.txt << 'EOF'
        # API Keys and Tokens
        [Aa][Pp][Ii]_?[Kk][Ee][Yy].*['|\"][0-9a-zA-Z]{32,45}['|\"]
        [Aa][Cc][Cc][Ee][Ss][Ss]_?[Tt][Oo][Kk][Ee][Nn].*['|\"][0-9a-zA-Z]{32,45}['|\"]
        [Ss][Ee][Cc][Rr][Ee][Tt]_?[Kk][Ee][Yy].*['|\"][0-9a-zA-Z]{32,45}['|\"]
        
        # AWS Credentials
        AKIA[0-9A-Z]{16}
        [Aa][Ww][Ss]_?[Aa][Cc][Cc][Ee][Ss][Ss]_?[Kk][Ee][Yy]_?[Ii][Dd].*['|\"][A-Z0-9]{20}['|\"]
        
        # GitHub Tokens
        ghp_[0-9a-zA-Z]{36}
        gho_[0-9a-zA-Z]{36}
        ghu_[0-9a-zA-Z]{36}
        ghs_[0-9a-zA-Z]{36}
        ghr_[0-9a-zA-Z]{36}
        
        # Private Keys
        -----BEGIN[ A-Z]*PRIVATE KEY-----
        -----BEGIN OPENSSH PRIVATE KEY-----
        -----BEGIN RSA PRIVATE KEY-----
        -----BEGIN DSA PRIVATE KEY-----
        -----BEGIN EC PRIVATE KEY-----
        
        # JWT Tokens
        eyJ[A-Za-z0-9_/+-]*\.eyJ[A-Za-z0-9_/+-]*\.[A-Za-z0-9_/+-]*
        
        # Database URLs
        [Mm][Oo][Nn][Gg][Oo][Dd][Bb]://[a-zA-Z0-9_.+-]+:[a-zA-Z0-9_.+-]+@[a-zA-Z0-9_.+-]+
        [Pp][Oo][Ss][Tt][Gg][Rr][Ee][Ss]://[a-zA-Z0-9_.+-]+:[a-zA-Z0-9_.+-]+@[a-zA-Z0-9_.+-]+
        [Mm][Yy][Ss][Qq][Ll]://[a-zA-Z0-9_.+-]+:[a-zA-Z0-9_.+-]+@[a-zA-Z0-9_.+-]+
        
        # Slack Tokens
        xox[baprs]-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}
        
        # Firebase
        AIza[0-9A-Za-z\\-_]{35}
        
        # Generic passwords and secrets
        [Pp][Aa][Ss][Ss][Ww][Oo][Rr][Dd].*['|\"][a-zA-Z0-9!@#$%^&*()_+=-]{8,}['|\"]
        [Ss][Ee][Cc][Rr][Ee][Tt].*['|\"][a-zA-Z0-9!@#$%^&*()_+=-]{8,}['|\"]
        [Cc][Rr][Ee][Dd][Ee][Nn][Tt][Ii][Aa][Ll].*['|\"][a-zA-Z0-9!@#$%^&*()_+=-]{8,}['|\"]
        EOF
        
        # Scan repository for secrets
        SECRETS_FOUND=0
        while IFS= read -r pattern; do
          if [[ ! "$pattern" =~ ^# ]] && [[ -n "$pattern" ]]; then
            if grep -r -E "$pattern" Sources/ Tests/ 2>/dev/null; then
              echo "‚ö†Ô∏è Potential secret found matching pattern: $pattern"
              SECRETS_FOUND=$((SECRETS_FOUND + 1))
            fi
          fi
        done < secret_patterns.txt
        
        if [ $SECRETS_FOUND -eq 0 ]; then
          echo "‚úÖ No secrets detected"
        else
          echo "‚ùå $SECRETS_FOUND potential secrets found"
          echo "Please review and remove any hardcoded secrets"
          exit 1
        fi
        
        # Generate secret scan report
        echo "# Secret Detection Report" > ${{ env.SECURITY_REPORT_PATH }}/secrets_report.md
        echo "Scan Date: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/secrets_report.md
        echo "Secrets Found: $SECRETS_FOUND" >> ${{ env.SECURITY_REPORT_PATH }}/secrets_report.md

    - name: Dependency Vulnerability Scan
      run: |
        echo "üîç Scanning dependencies for known vulnerabilities..."
        
        # Swift Package Manager dependency analysis
        echo "Analyzing Swift packages..."
        swift package show-dependencies --format json > dependencies.json
        
        # Check for outdated and vulnerable packages
        echo "## Dependency Analysis" > ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md
        echo "Scan Date: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md
        echo "### Swift Package Dependencies" >> ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md
        swift package show-dependencies >> ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md
        
        # Check for known vulnerabilities in dependencies
        echo "üîç Checking for known vulnerabilities..."
        
        # Parse package names and check against vulnerability databases
        if command -v osv-scanner &> /dev/null; then
          osv-scanner --lockfile Package.resolved >> ${{ env.SECURITY_REPORT_PATH }}/dependency_report.md 2>&1 || echo "OSV Scanner not available"
        fi
        
        echo "‚úÖ Dependency vulnerability scan completed"

    - name: Static Analysis Security Testing (SAST)
      run: |
        echo "üîç Running static analysis security testing..."
        
        # Semgrep security rules for Swift
        echo "Running Semgrep security analysis..."
        if command -v semgrep &> /dev/null; then
          semgrep --config=auto --json --output=${{ env.SECURITY_REPORT_PATH }}/semgrep_results.json Sources/ || echo "Semgrep analysis completed with findings"
        fi
        
        # Custom Swift security analysis
        echo "Running custom Swift security checks..."
        
        # Check for unsafe Swift constructs
        echo "## Static Analysis Security Report" > ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        echo "Scan Date: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        
        echo "### Unsafe Swift Constructs" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        UNSAFE_COUNT=$(grep -r --include="*.swift" "unsafeBitCast\|unsafeDowncast\|UnsafePointer\|UnsafeMutablePointer\|withUnsafePointer" Sources/ | wc -l || echo 0)
        echo "Unsafe constructs found: $UNSAFE_COUNT" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        
        if [ $UNSAFE_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Unsafe Swift constructs detected:"
          grep -r --include="*.swift" "unsafeBitCast\|unsafeDowncast\|UnsafePointer\|UnsafeMutablePointer\|withUnsafePointer" Sources/ || true
          echo "" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
          echo "```" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
          grep -r --include="*.swift" "unsafeBitCast\|unsafeDowncast\|UnsafePointer\|UnsafeMutablePointer\|withUnsafePointer" Sources/ >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md || true
          echo "```" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        fi
        
        # Check for force unwrapping in security-critical code
        echo "### Force Unwrapping in Security Code" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        FORCE_UNWRAP_COUNT=$(find Sources/SwiftAI/Infrastructure/Security/ -name "*.swift" -exec grep -c "!" {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo 0)
        echo "Force unwraps in security code: $FORCE_UNWRAP_COUNT" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        
        if [ $FORCE_UNWRAP_COUNT -gt 0 ]; then
          echo "‚ö†Ô∏è Force unwrapping found in security code"
          find Sources/SwiftAI/Infrastructure/Security/ -name "*.swift" -exec grep -n "!" {} + >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md 2>/dev/null || true
        fi
        
        # Check for proper input validation
        echo "### Input Validation Analysis" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        VALIDATION_COUNT=$(grep -r --include="*.swift" "ValidationService\|validateInput\|guard.*validate" Sources/ | wc -l || echo 0)
        echo "Input validation patterns found: $VALIDATION_COUNT" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        
        # Check for encryption usage
        echo "### Encryption Implementation" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        ENCRYPTION_COUNT=$(grep -r --include="*.swift" "CryptoKit\|AES\|ChaCha20\|SecureEnclave\|Keychain" Sources/ | wc -l || echo 0)
        echo "Encryption implementations found: $ENCRYPTION_COUNT" >> ${{ env.SECURITY_REPORT_PATH }}/sast_report.md
        
        echo "‚úÖ Static analysis security testing completed"

    - name: OWASP Mobile Security Analysis
      run: |
        echo "üîç Running OWASP Mobile Security checks..."
        
        echo "## OWASP Mobile Security Analysis" > ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "Scan Date: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M1: Improper Platform Usage
        echo "### M1: Improper Platform Usage" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        IOS_API_MISUSE=$(grep -r --include="*.swift" "NSUserDefaults\|UserDefaults.*\.set.*password\|\.plist.*password" Sources/ | wc -l || echo 0)
        echo "Potential iOS API misuse: $IOS_API_MISUSE instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M2: Insecure Data Storage
        echo "### M2: Insecure Data Storage" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        INSECURE_STORAGE=$(grep -r --include="*.swift" "NSUserDefaults\|UserDefaults\|writeToFile\|\.plist" Sources/ | grep -v -i "keychain\|secure" | wc -l || echo 0)
        SECURE_STORAGE=$(grep -r --include="*.swift" "Keychain\|SecureStorage\|CryptoKit" Sources/ | wc -l || echo 0)
        echo "Potential insecure storage: $INSECURE_STORAGE instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "Secure storage implementations: $SECURE_STORAGE instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M3: Insecure Communication
        echo "### M3: Insecure Communication" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        HTTP_USAGE=$(grep -r --include="*.swift" "http://" Sources/ | wc -l || echo 0)
        TLS_IMPLEMENTATION=$(grep -r --include="*.swift" "URLSessionConfiguration\|certificate\|TLS\|SSL" Sources/ | wc -l || echo 0)
        echo "HTTP usage (should be 0): $HTTP_USAGE instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "TLS/SSL implementations: $TLS_IMPLEMENTATION instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M4: Insecure Authentication
        echo "### M4: Insecure Authentication" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        BIOMETRIC_AUTH=$(grep -r --include="*.swift" "LocalAuthentication\|LAContext\|TouchID\|FaceID" Sources/ | wc -l || echo 0)
        TOKEN_HANDLING=$(grep -r --include="*.swift" "token\|jwt\|oauth" Sources/ | wc -l || echo 0)
        echo "Biometric authentication: $BIOMETRIC_AUTH implementations" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "Token handling: $TOKEN_HANDLING implementations" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M5: Insufficient Cryptography
        echo "### M5: Insufficient Cryptography" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        STRONG_CRYPTO=$(grep -r --include="*.swift" "AES256\|ChaCha20\|Poly1305\|SHA256\|SHA512" Sources/ | wc -l || echo 0)
        WEAK_CRYPTO=$(grep -r --include="*.swift" "MD5\|SHA1\|DES\|RC4" Sources/ | wc -l || echo 0)
        echo "Strong cryptography: $STRONG_CRYPTO implementations" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "Weak cryptography (should be 0): $WEAK_CRYPTO instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M6: Insecure Authorization
        echo "### M6: Insecure Authorization" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        AUTHORIZATION_CHECKS=$(grep -r --include="*.swift" "authorize\|permission\|access.*control" Sources/ | wc -l || echo 0)
        echo "Authorization implementations: $AUTHORIZATION_CHECKS instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M7: Client Code Quality
        echo "### M7: Client Code Quality" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        BUFFER_OVERFLOW_PROTECTION=$(grep -r --include="*.swift" "withUnsafeBytes\|withMemoryRebound" Sources/ | wc -l || echo 0)
        echo "Memory management operations: $BUFFER_OVERFLOW_PROTECTION instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M8: Code Tampering
        echo "### M8: Code Tampering" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        ANTI_TAMPER=$(grep -r --include="*.swift" "jailbreak\|root.*detect\|debugger.*detect" Sources/ | wc -l || echo 0)
        echo "Anti-tampering measures: $ANTI_TAMPER implementations" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M9: Reverse Engineering
        echo "### M9: Reverse Engineering" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        OBFUSCATION=$(grep -r --include="*.swift" "obfuscat\|encrypt.*string" Sources/ | wc -l || echo 0)
        echo "Code obfuscation: $OBFUSCATION implementations" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        # M10: Extraneous Functionality
        echo "### M10: Extraneous Functionality" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        DEBUG_CODE=$(grep -r --include="*.swift" "print(\|NSLog\|debugPrint\|#if DEBUG" Sources/ | wc -l || echo 0)
        TEST_CODE=$(grep -r --include="*.swift" "test.*password\|debug.*user" Sources/ | wc -l || echo 0)
        echo "Debug code instances: $DEBUG_CODE" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        echo "Test code in production: $TEST_CODE instances" >> ${{ env.SECURITY_REPORT_PATH }}/owasp_report.md
        
        echo "‚úÖ OWASP Mobile Security analysis completed"

    - name: Code Quality Security Gates
      run: |
        echo "üîç Applying security-focused code quality gates..."
        
        # Check SwiftLint security-related rules
        echo "Running SwiftLint security analysis..."
        if command -v swiftlint &> /dev/null; then
          swiftlint lint --reporter json > ${{ env.SECURITY_REPORT_PATH }}/swiftlint_security.json || true
        fi
        
        # Security-specific code patterns check
        echo "## Security Code Quality Report" > ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        echo "Scan Date: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        
        # Check for proper error handling in security code
        echo "### Security Error Handling" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        SECURITY_TRY_CATCH=$(find Sources/SwiftAI/Infrastructure/Security/ -name "*.swift" -exec grep -c "try\|catch\|throw" {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo 0)
        echo "Error handling in security code: $SECURITY_TRY_CATCH instances" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        
        # Check for security logging
        echo "### Security Logging" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        SECURITY_LOGGING=$(find Sources/SwiftAI/Infrastructure/Security/ -name "*.swift" -exec grep -c "log\|audit" {} + 2>/dev/null | awk '{sum += $1} END {print sum}' || echo 0)
        echo "Security logging implementations: $SECURITY_LOGGING instances" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        
        # Check for secure random number generation
        echo "### Secure Random Number Generation" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        SECURE_RANDOM=$(grep -r --include="*.swift" "SecRandomCopyBytes\|CryptoKit.*random\|SystemRandomNumberGenerator" Sources/ | wc -l || echo 0)
        echo "Secure random implementations: $SECURE_RANDOM instances" >> ${{ env.SECURITY_REPORT_PATH }}/quality_security_report.md
        
        echo "‚úÖ Security code quality gates completed"

    - name: Generate Security Summary
      run: |
        echo "üìä Generating comprehensive security summary..."
        
        echo "# SwiftAI Security Audit Summary" > ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "Generated: $(date)" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "Repository: ${{ github.repository }}" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "Commit: ${{ github.sha }}" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        
        echo "## Executive Summary" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "This report provides a comprehensive security analysis of the SwiftAI framework, including:" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "- Secret detection and credential scanning" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "- Dependency vulnerability analysis" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "- Static application security testing (SAST)" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "- OWASP Mobile Top 10 compliance check" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "- Code quality security gates" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        
        echo "## Security Status" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "‚úÖ **Secret Detection**: Completed" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "‚úÖ **Dependency Scan**: Completed" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "‚úÖ **Static Analysis**: Completed" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "‚úÖ **OWASP Analysis**: Completed" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "‚úÖ **Quality Gates**: Completed" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        
        echo "## Recommendations" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "1. Regular security scanning should be performed weekly" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "2. All dependencies should be kept up to date" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "3. Security testing should be integrated into the CI/CD pipeline" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "4. Regular penetration testing should be conducted" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        echo "5. Security training should be provided to all developers" >> ${{ env.SECURITY_REPORT_PATH }}/security_summary.md
        
        echo "‚úÖ Security audit completed successfully"

    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: ${{ env.SECURITY_REPORT_PATH }}/
        retention-days: 90

    - name: Security Gate Enforcement
      run: |
        echo "üö® Enforcing security quality gates..."
        
        # Define security thresholds
        MAX_SECRETS=0
        MAX_HIGH_VULNERABILITIES=0
        MAX_CRITICAL_VULNERABILITIES=0
        
        # Check if critical security issues were found
        SECURITY_ISSUES=0
        
        # Check for secrets
        if [ -f "${{ env.SECURITY_REPORT_PATH }}/secrets_report.md" ]; then
          SECRETS_FOUND=$(grep "Secrets Found:" ${{ env.SECURITY_REPORT_PATH }}/secrets_report.md | awk '{print $3}' || echo 0)
          if [ "$SECRETS_FOUND" -gt "$MAX_SECRETS" ]; then
            echo "‚ùå Security Gate Failed: $SECRETS_FOUND secrets found (max allowed: $MAX_SECRETS)"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
        fi
        
        # Summary
        if [ $SECURITY_ISSUES -eq 0 ]; then
          echo "‚úÖ All security gates passed successfully!"
          echo "üîí SwiftAI meets enterprise security standards"
        else
          echo "‚ùå Security gates failed: $SECURITY_ISSUES issues found"
          echo "Please review security reports and address issues before proceeding"
          exit 1
        fi

  # Security notification job
  security_notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: security_audit
    if: always()
    
    steps:
    - name: Security Status Notification
      run: |
        if [[ "${{ needs.security_audit.result }}" == "success" ]]; then
          echo "üîí SwiftAI Security Audit: PASSED ‚úÖ"
          echo "All security checks completed successfully"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Scan completed at: $(date)"
        else
          echo "üö® SwiftAI Security Audit: FAILED ‚ùå"
          echo "Security issues detected - immediate attention required"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Review security reports for details"
        fi