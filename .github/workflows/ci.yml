name: SwiftAI CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**', 'bugfix/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for dependency vulnerability checks
    - cron: '0 2 * * *'

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer
  iOS_DESTINATION: 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.0'
  WATCHOS_DESTINATION: 'platform=watchOS Simulator,name=Apple Watch Series 9 (45mm),OS=10.0'
  MACOS_DESTINATION: 'platform=macOS'
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  # Pre-flight checks for fast feedback
  preflight:
    name: Pre-flight Checks
    runs-on: macos-14
    timeout-minutes: 10
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/pip
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/Package.swift', '**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-dependencies-

    - name: Select Xcode Version
      run: sudo xcode-select -switch $DEVELOPER_DIR

    - name: Xcode Version Info
      run: xcodebuild -version

    - name: Swift Version Info
      run: swift --version

    - name: Install SwiftLint
      run: |
        brew install swiftlint
        swiftlint version

    - name: Install SwiftFormat
      run: |
        brew install swiftformat
        swiftformat --version

    - name: Swift Package Manager - Resolve Dependencies
      run: |
        swift package resolve
        swift package show-dependencies

    - name: Code Style Check (SwiftLint)
      run: |
        swiftlint lint --reporter github-actions-logging
        echo "SwiftLint analysis completed"

    - name: Code Format Check (SwiftFormat)
      run: |
        swiftformat --lint .
        echo "SwiftFormat analysis completed"

    - name: Validate Package.swift
      run: |
        swift package dump-package > /dev/null
        echo "Package.swift validation completed"

  # Security and vulnerability scanning
  security:
    name: Security Scanning
    runs-on: macos-14
    needs: preflight
    timeout-minutes: 15
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/pip
        key: ${{ runner.os }}-dependencies-${{ hashFiles('**/Package.swift', '**/Package.resolved') }}

    - name: Select Xcode Version
      run: sudo xcode-select -switch $DEVELOPER_DIR

    - name: Run Security Audit
      run: |
        # Check for hardcoded secrets
        echo "🔍 Scanning for hardcoded secrets..."
        if grep -r -i --include="*.swift" "password\|secret\|api_key\|token\|credential" Sources/ Tests/ || true; then
          echo "⚠️ Potential hardcoded secrets found. Please review."
        else
          echo "✅ No hardcoded secrets detected"
        fi

    - name: Dependency Vulnerability Check
      run: |
        echo "🔍 Checking for known vulnerabilities in dependencies..."
        swift package show-dependencies --format json > dependencies.json
        echo "📋 Dependencies analyzed"
        
        # Check for outdated dependencies
        echo "🔍 Checking for outdated dependencies..."
        swift package show-dependencies
        echo "✅ Dependency check completed"

    - name: Static Analysis Security Test
      run: |
        echo "🔍 Running static analysis security tests..."
        
        # Check for unsafe Swift constructs
        echo "Checking for unsafe Swift constructs..."
        if grep -r --include="*.swift" "unsafeBitCast\|unsafeDowncast\|UnsafePointer\|UnsafeMutablePointer" Sources/ || true; then
          echo "⚠️ Unsafe Swift constructs found. Please review for security implications."
        else
          echo "✅ No unsafe constructs detected"
        fi
        
        # Check for force unwrapping in critical paths
        echo "Checking for force unwrapping in security-critical code..."
        if grep -r --include="*.swift" "!" Sources/SwiftAI/Infrastructure/Security/ || true; then
          echo "⚠️ Force unwrapping found in security code. Please review."
        else
          echo "✅ No force unwrapping in security code"
        fi

    - name: OWASP Mobile Security Check
      run: |
        echo "🔍 Running OWASP Mobile Security checks..."
        
        # Check for proper input validation
        echo "Checking input validation patterns..."
        if grep -r --include="*.swift" "ValidationService\|validateInput" Sources/; then
          echo "✅ Input validation found"
        else
          echo "⚠️ Input validation not found"
        fi
        
        # Check for encryption usage
        echo "Checking encryption implementation..."
        if grep -r --include="*.swift" "CryptoKit\|AES\|ChaCha20" Sources/; then
          echo "✅ Encryption implementation found"
        else
          echo "⚠️ Encryption implementation not found"
        fi

  # Build verification across platforms
  build:
    name: Build Verification
    runs-on: macos-14
    needs: [preflight, security]
    timeout-minutes: 30
    strategy:
      matrix:
        scheme: [SwiftAI]
        destination: 
          - 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.0'
          - 'platform=iOS Simulator,name=iPhone SE (3rd generation),OS=17.0'
          - 'platform=iOS Simulator,name=iPad Air (5th generation),OS=17.0'
          - 'platform=macOS'
        include:
          - scheme: SwiftAI
            enable_testing: true
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Cache Build Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/pip
        key: ${{ runner.os }}-build-${{ matrix.destination }}-${{ hashFiles('**/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ matrix.destination }}-
          ${{ runner.os }}-build-

    - name: Select Xcode Version
      run: sudo xcode-select -switch $DEVELOPER_DIR

    - name: Resolve Swift Package Dependencies
      run: swift package resolve

    - name: Build Framework
      run: |
        set -o pipefail
        xcodebuild build \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Release \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty

    - name: Build for Testing
      if: matrix.enable_testing
      run: |
        set -o pipefail
        xcodebuild build-for-testing \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty

  # Comprehensive testing suite
  test:
    name: Test Suite
    runs-on: macos-14
    needs: build
    timeout-minutes: 45
    strategy:
      matrix:
        test_type: [unit, integration, performance]
        destination: 
          - 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.0'
          - 'platform=macOS'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Cache Test Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.cache/pip
        key: ${{ runner.os }}-test-${{ matrix.test_type }}-${{ matrix.destination }}-${{ hashFiles('**/Package.swift') }}

    - name: Select Xcode Version
      run: sudo xcode-select -switch $DEVELOPER_DIR

    - name: Run Unit Tests
      if: matrix.test_type == 'unit'
      run: |
        set -o pipefail
        xcodebuild test \
          -scheme SwiftAI \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          -testPlan UnitTests \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty

    - name: Run Integration Tests
      if: matrix.test_type == 'integration'
      run: |
        set -o pipefail
        xcodebuild test \
          -scheme SwiftAI \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          -only-testing:SwiftAITests/Integration \
          -enableCodeCoverage YES \
          -resultBundlePath IntegrationTestResults \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty

    - name: Run Performance Tests
      if: matrix.test_type == 'performance'
      run: |
        set -o pipefail
        xcodebuild test \
          -scheme SwiftAI \
          -destination '${{ matrix.destination }}' \
          -configuration Release \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          -only-testing:SwiftAIPerformanceTests \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty

    - name: Generate Code Coverage Report
      if: matrix.test_type == 'unit'
      run: |
        # Extract coverage data
        xcrun xccov view --report --json ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult > coverage.json
        
        # Parse and validate coverage
        echo "📊 Code Coverage Analysis:"
        COVERAGE=$(xcrun xccov view --report ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult | grep "SwiftAI.framework" | head -1 | awk '{print $4}' | sed 's/%//')
        echo "Overall Coverage: ${COVERAGE}%"
        
        # Enforce minimum coverage
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "❌ Code coverage ${COVERAGE}% is below minimum requirement of 90%"
          exit 1
        else
          echo "✅ Code coverage ${COVERAGE}% meets minimum requirement"
        fi

    - name: Upload Coverage to Codecov
      if: matrix.test_type == 'unit' && env.CODECOV_TOKEN != ''
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        xcode: true
        xcode_archive_path: ~/Library/Developer/Xcode/DerivedData/*/Logs/Test/*.xcresult

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test_type }}-${{ matrix.destination }}
        path: |
          TestResults/
          IntegrationTestResults/
          *.json
        retention-days: 30

  # Final status check
  ci_success:
    name: CI Pipeline Success
    runs-on: macos-14
    needs: [preflight, security, build, test]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Check CI Status
      run: |
        echo "🎯 Checking overall CI pipeline status..."
        
        # Check if all required jobs passed
        if [[ "${{ needs.preflight.result }}" == "success" && 
              "${{ needs.security.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" && 
              "${{ needs.test.result }}" == "success" ]]; then
          echo "✅ All CI checks passed successfully!"
          echo "🚀 SwiftAI is ready for deployment"
        else
          echo "❌ Some CI checks failed"
          echo "Preflight: ${{ needs.preflight.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          exit 1
        fi

    - name: Success Notification
      if: success()
      run: |
        echo "🎉 SwiftAI CI Pipeline completed successfully!"
        echo "📊 All quality gates passed"
        echo "🔒 Security scans completed"
        echo "🧪 All tests passed"
        echo "🚀 Ready for production deployment"
